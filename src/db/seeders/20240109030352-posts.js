"use strict";

module.exports = {
  async up(queryInterface, Sequelize) {
    /**
     * Add seed commands here.
     *
     * Example:
     * await queryInterface.bulkInsert('People', [{
     *   name: 'John Doe',
     *   isBetaMember: false
     * }], {});
     */
    await queryInterface.bulkInsert("Post", [
      {
        id: "b03444bf-75ab-4da0-9da4-de585ebf28e1",
        title: "[object object]",
        body: '# [object object]\n\n### [object object]????\n\n회사 프로젝트 중 서버에서 받은 중첩 배열 객체를 \n\nejs템플릿에서 사용하려는 와중에 생긴문제\n\n[object object] 가 콘솔에 찍히며 for문 등으로 접근시 \n\n[ o b j e c t  o b j e c t ] 이런 식으로 스트링으로 출력 되었다\n\n### * 해결 방법\n```js\n//* 1. input type hidden 값에 stringify화 해서 저장한 뒤\n<input type="hidden" value="JSON.stringify(서버에서 받은 데이터 변수명)"  name="serverData" />\n//* 2. 자바스크립트로 값을 가져올 떄 parse 해서 가져옴\nconst data = JSON.parse(document.querySelector("input[name=\'serverData\']").value);\n```\n\n\n\n\n\n\n\n',
        createdAt: "2023-05-21",
        updatedAt: "2023-05-21",
      },
      {
        id: "312940b6-33ae-4aca-88df-defbe0c9c73e",
        title: "Intl Api",
        body: "# Intl Api\n\n### 다국어 지원 Api\n\n\n### * 동기\n전 회사에서 글로벌한 서비스를 위해 다양한 언어 및 날짜 숫자 등에 대해\n\n번환이 필요 하였다. 기본은 node 환경에서 i18next모듈로 번역 및 변환을 할 수 있었다.\n\n하지만 i18next 모듈은 한글.json파일을 기준으로 번역된 json파일이 있어야 매칭 번역이 가능하였다.\n\n개발 환경에서는 번역된 다른나라 언어 json 파일을 받기까지 시간이 꾀 걸려 불편하기에 \n\n간단하게 변환할 수 있는 방법을 찾게 된 것이 Intl Api 이다.\n\n### * 기본 사용방법\n```js\n//* Datetime format\nnew Intl.DateTimeFormat().format();\n//* Number format\nnew Intl.NumberFormat().format();\n//* RelativeTime Format\nnew Intl.RelativeTimeFormat().format();\n```\n### * DateTimeFormat\n```js\nnew Intl.DateTimeFormat(\"ko\", { dateStyle: 'full' }).format(new Date());\n//* 2023년 1월 19일 목요일\nnew Intl.DateTimeFormat(\"ko\", { dateStyle: 'long' }).format(new Date());\n//* 2023년 1월 19일\nnew Intl.DateTimeFormat(\"ko\", { dateStyle: 'medium' }).format(new Date());\n//* 2023.01.19.\nnew Intl.DateTimeFormat(\"ko\", { dateStyle: 'short' }).format(new Date());\n//* 23.01.19.\nnew Intl.DateTimeFormat(\"ko\", { timeStyle: 'full' }).format(new Date());\n//* 오전 12시 4분 54초 대한민국 표준시 \nnew Intl.DateTimeFormat(\"ko\", { timeStyle: 'long' }).format(new Date());\n//* 오전 12시 5분 39초 GMT+9\nnew Intl.DateTimeFormat(\"ko\", { timeStyle: 'medium' }).format(new Date());\n//* 오전 12:06:02\nnew Intl.DateTimeFormat(\"ko\", { timeStyle: 'short' }).format(new Date());\n//* 오전 12:06\n```\n\n### * NumberFormat\n```js\nnew Intl.NumberFormat('ko', { style: 'percent' }).format(0.5);\n//*  50%\nnew Intl.NumberFormat('ko', { style: 'currency', currency: 'KRW' }).format(1238214);\n//* ₩1,238,214\nnew Intl.NumberFormat('ko', { style: 'currency', currency: 'EUR' }).format(32.12);\n//* €32.12\nnew Intl.NumberFormat('ko', { style: 'unit', unit: 'kilogram' }).format(53);\n//* '53kg'\n```\n\n### * RelativeTimeFormat\n```js\nconst rTf = new Intl.RelativeTimeFormat(\"ko\");\nrtf.format(1, \"day\");\n//* 1일 후\nrTf.format(-1, \"quarter\");\n//* 1분기 전\n//* 시간은 직접 계산해 줘야 함.\n```",
        createdAt: "2023-11-29",
        updatedAt: "2023-11-29",
      },
      {
        id: "abed2d5b-b74d-4bb8-8402-c41ffd9c4d2b",
        title: "React select library",
        body: '# React-select library\n\n### 설치 방법\n```js\nnpm i  react-select\n```\n\n\n### 사용방법\n```js\n//* 사용자가 옵션을 추가 해야 하는 경우\nimport CreatableSelect from "react-select/creatable";\n\n<>\n    <CreatableSelect\n        //* 다중 셀렉트 옵션\n        isMulti\n        //* 옵션을 새로 추가 할때 입력한 value값이 들어온다\n        //* 여기서 서버에 맞게 상태 업데이트 해줌\n        onCreatebleOption={(value) => setState(value)}\n        value={state => state.map(value => ({label: option 이름으로 사용될 state의 값, value: input value 속정으로 사용될 값}))}\n        //* 옵션을 삭제 하거나 변경할때 객체 값이 들어온다\n        onChange={(obj) => 여기서 state 값 업데이트 해준다} \n    />\n</>\n\n//* 옵션을 선택만 해야 하는 경우\nimport ReactSelect from "react-select";\n<>\n  <ReactSelect\n    isMulti\n    onCreateOption\n    value\n    //* 사용자들이 선택할 수 있는 옵션\n    options={(state) => state.map(option => ({label: option.label, value: option.value}))}\n    onChange\n  />\n</>\n```\n\n###  연구 필요⚠️\n- 타입스크립트 스타일 오버라이트시 onChange 값으로 들어오는 타입에 문제 생김.\n- Type Assertion으로 어찌어찌 동작은 하나 연구가 필요함.\n\n\n<a href="https://react-select.com/home" target="_blank">[참조]</a>',
        createdAt: "2023-11-20",
        updatedAt: "2023-11-20",
      },
      {
        id: "8423bc2a-efa9-438b-b721-88ba843c01bb",
        title: "Typescript와 객체",
        body: '# Typescript와 객체\n\n타입스크립트에서 보통 객체의 타입을\n```js\ntype SomeObjType = {\n  name: string;\n  age: number;\n  gender: "male" | "female";\n  hobby: Array<string>;\n};\n```\n보통 이런 식으로 정의한다. \n\n하지만 위와 같은 방법으로 타입을 정의하게 된다면 \n\n항상 객체 안에는 name, age, gender, hobby 라는 프로퍼티는 꼭 존재해야 한다.\n\n물론 프로퍼티를 옵셔널(?)로 설정하면 괜찮다. \n\n자바스크립트 프로그래밍을 하다 보면 정의하지 않은 프로퍼티가 필요한 경우가 있을 것이다..\n\n필요할때 마다 기존 타입을 상속받아 사용할 수 있지만...\n\n### 이렇게 객체에 어떤 프로퍼티가 있을지 명확하게 모르는 경우 사용한다.\n\n\n```\ntype Obj = {\n    [key: string]: string | number;\n};\n```\n\n이런 식으로 사용하면 OK!(프로퍼티에는 리터럴타입만 허용된다고 함)\n\n[주절주절]\n\n\n동적 타입이 단점이라고 이야기 하지만 \n\n그로 인해 유연한 프로그래밍과 재미가 더해 지는 것이라 생각\n\n타입스크립트로 인해 얻는 장점이 많긴 하지만 \n\n객체를 다루며 놀이 하는 소소한 재미가 감소\n\n아직 부족한 내가 타입스크립트를 사용하면서도  객체를 \n\n결론은 다루는 재미를 느낄 수 있도록 노력해야 겠음',
        createdAt: "2023-10-21",
        updatedAt: "2023-10-21",
      },
      {
        id: "693a8221-7634-4d67-a258-9b028a353f0e",
        title: "Vite 환경변수",
        body: "# Vite 환경변수\n\n###  기존의 React 환경변수\n\n```js\n//* .env\nREACT_APP_ENVNAME=value\n\n//* 사용처\nconst env1 = process.env.REACT_APP_ENVNAME;\n```\n### * Vite 에서는\n```js\n//* .env\n네이밍은 딱히 관계 없는듯하다 \n\n//* 사용처\nconst env1 = import.meta.env.VITE_ENVNAME;\n```\n",
        createdAt: "2023-11-10",
        updatedAt: "2023-11-10",
      },
      {
        id: "aff8fb7e-7dae-4101-8129-bdc5fb6156c8",
        title:
          "which is not functionally dependent on columns in group by clause",
        body: "# SQL ONLY_FULL_GROUP_BY\n\n### * 상황\n\n회사에서는 Sequelize ORM 환경에서 로우쿼리와 Op, 프로시져를 통해 \n\n쿼리를 날리며 group을 할때는 전혀 발생하지 않았는데 쿼리를 알맞게 작성\n\n하였음에도 오류가 발생 하였다.\n\n> which is not functionally dependent on columns in group by clause...\n>\n>오류내용\n\n\n### * 원인\nmysql 5.7 버전 이후 sql_mode에 추가된 설정으로 바른 쿼리를 작성할 수 있도록 \n\n추가 된 것 같다. group_by에 명시되지 않은 컬럼을 선택하는 것이 의미적으로 \n\n정확하지 않고 표준 쿼리 작성에 어긋난다는 것이다. 여태 바르지 못한 쿼리를 작성\n\n하고 학습해 왔던 것이다...\n\n### * 해결 방법 \n구글링으로 많은 해결 방안이 나와 따로 적지는 않겠다.\n\n1. 그룹바이에 명시하지 않은 컬럼을 명시한다.\n2. sql_mode를 수정한다.\n3. 서브쿼리에서 그루핑한 컬럼을 선택한다.\n4. 그룹바이에 명시되지 않은 컬럼에 집계함수를 사용한다.\n\n이 정도의 해결 방법이 있는것 같다.",
        createdAt: "2023-10-15",
        updatedAt: "2023-10-15",
      },
      {
        id: "a6cda2cc-51c0-40e1-8825-a65666ab2e33",
        title: "clientWidth & offsetWidth & scrollWidth",
        body: '# 너비에 대하여...\n\n블로그 페이지를 수정하며 태그에 대한 슬라이드 기능을 개발하며\n\n궁금증이 생겼다. \n\n사용할 때 마다 까먹어 이번 기회에 짧게나마 정리를 해 두려도 한다.\n\n### clientWidth\n>  clientWidth란?\n>\n> 쉽게 target box의 내부 길이라고 보면 좋을것 같다.\n>\n> border를 포함하지 않은 너비 \n>\n> contents + padding \n\n### offsetWidth\n> offsetWidth란?\n>\n> 쉽게 target box의 내외부 길이라고 보면 좋을 겉 같다.\n>\n> border를 포함한 너비\n>\n> contents + padding + border\n\n### scrollWidth\n> scrollWidth란?\n> \n> 쉽게 스크롤 할 수 있는 영역 까지의 총 너비\n>\n> 부모 박스 overflow: hidden으로 숨겨진 자식 박스의 총 너비\n\n<a href="https://jsfiddle.net/y8Y32/25/" target="_blank">[참조]</a>\n\n',
        createdAt: "2023-12-09",
        updatedAt: "2023-12-09",
      },
      {
        id: "e7369275-5235-4665-91bd-b3bc65277557",
        title: "React-Select onChange option(isMulti)",
        body: "# React select\n\n### React-select isMulti onChange 옵션에 대하여...\n\n발단은 onChange옵션으로 들어오는 타입이 정확함에도\n\n> property label does not exist on type MultiValue<>...\n\n라는 오류가 계속 발생 하였다.\n\nIDE에 타입 유추로 들어오는 개별 타입도 정확한데 오류가 계속 발생함.\n\n구글링과 래퍼런스가 없어서 고민을 하다 문뜻 떠오른 생각에 해결 하였다, \n\n```js\nargs: MultiValue<{ label: string; value: string}>\n```\n\n위에 MultiValue<{}>가 해결의 열쇠가 되었다. \n\n그렇다 들어오는 값은 개별 객체가 아닌 배열 이었던 것이다....\n\nMultiValue라는 단어에 알아 차렸어야 했는데....\n\n계속 배열에 속한 객체의 개별 속성에 접근해 오류를 뿜었는데...\n\n차라리 타입[] 형식으로 알려 줬다면 알았을 것을...\n\n탓해 뭐하니...이제라도 알아 다행...\n",
        createdAt: "2023-12-11",
        updatedAt: "2023-12-11",
      },
      {
        id: "8f9ddf54-3a16-4a4c-9638-c2473ee1c496",
        title: "Web Server vs WAS",
        body: '# Web Server vs WAS\n\n### Web Server\n> client web으로 부터 http 요청을 받아들이고\n> html 같은 웹페이지를 반환하는 프로그램\n>\n> ex) Aphache, Nginx...\n>\n> ### 역할\n> 보통 client와 WAS 사이에 위치함.\n> client에 정적 파일을 제공(html, image, css, js ...)\n> client로 부터 들어온 동적 요청을 WAS로 전달.\n> WAS에서 처리한 부분을 다시 client에 전달.\n\n### WAS(Web Application Server)\n> WAS는 동적 서버 콘텐츠를 수행하는 것으로 일반적인 웹 서버와 구별이 되며,\n> 주로 데이터베이스 서버와 같이 수행이 된다.\n> 웹서버와 웹컨테이너가 합쳐진 형태,\n>\n> 웹컨테이너: 웹서버에서 요청한 파일들의 수행 결과물을 다시 웹서버로 보내줌.\n>\n> ex) Tomcat, Jboss...\n> \n> ### 역할\n> 다양한 비지니스 로직의 처리가 가능하기 때문에 DB와 연동해\n> 동적 컨텐츠를 제공할 수 있다.\n> 단순한 정적 컨텐츠도 제공 가능함.\n>   \n\n\nWAS는 웹서버의 기능까지 할 수 있는데 왜??\n- WAS는 DB조회, 각종 비지니스 로직 처리 등에 집중 하는게 좋다.\n- WAS가 정적 컨텐츠 요청까지 처리 하면 효율성이 떨어짐.(동적 컨텐츠 처리 지연)\n\n* 단순한 정적 컨텐츠 제공은 웹서버에 기능 분리시켜 서버 부하를 방지한다.\n\n\n<a href="https://story.pxd.co.kr/1647" target="_blank">[참고]</a>',
        createdAt: "2023-12-14",
        updatedAt: "2023-12-14",
      },
      {
        id: "c38d9441-bdc1-44ad-ae00-772b09c30c85",
        title: "우분투 웹서버 만들기 1",
        body: '# 우분투 웹서버 만들기 1\n\n남는 컴퓨터를 활용해 개인 서버를 만들고 싶어 시작.\n\n집에 남는 컴퓨터를 활용해 외부에서 접속할 수 있는 서버를 만들고 싶은 분들\n\n참고: 공인ip(isp) => 벽장(H614G) 사설 ip 배분 >> sk 공유기 >> 사설 ip 분배\n\n이런 구조이고 서버를 만든 데스크탑은 벽에서 나온 랜선에 연결되어 있음.\n\n공인 ip - 사설ip(벽) - 사설ip(벽) - 사설ip(데스크탑 웹서버) - 사설 ip(벽)  - 사설ip(벽 > 랜 sk 공유기 wifi, iptv...)\n\n사설ip(벽 > 랜 sk 공유기)\n    ㄴ사설ip(macbook wifi)  - 기타 사설ip(와파이)\n\n쉽게 이해 될 수 있도록 사진은 나중에 서버 세팅 후 첨부할 수 있도록 할 예정.\n\n### 1. 우분투 설치\n우분투 서버를 설치 하고 싶었으나, 설치 과정에 문제가 있고 시간이 오래 걸릴것 같아 데스크탑으로 설치 하였음.(20.0.4)\n\n윈도우 환경에서 우분투 데스크탑 듀얼부팅 등 검색하면 많은 자료를 찾을 수 있기에 생략하겠음.\n<a href="https://palpit.tistory.com/entry/Ubuntu-%EC%9C%88%EB%8F%84%EC%9A%B0-10%EC%97%90%EC%84%9C-%EC%9A%B0%EB%B6%84%ED%88%AC-%EB%93%80%EC%96%BC%EB%B6%80%ED%8C%85-%ED%95%98%EA%B8%B0%EB%A9%80%ED%8B%B0%EB%B6%80%ED%8C%85-1" target="_blank">참고</a>\n\n### 2. 한글 설정(20.0.4)\n우분투 설치시 한글 설정 한 분은 패스.\n\n#### 1. Settings > Regions & Language > Input Sources 밑의 + 버튼 클릭\n#### 2. Korean 선택 후 add\n#### 3. 추가 후 English 삭제 후 밑의 Manage installed Languages 버튼 클릭해 설치\n#### 4. 터미널에 reboot 명령어로 다시시작(로그오프만 해도 된다고 함)\n#### 5. 다시 Settings > Regions & Language > Input Sources 밑 + 버튼 클릭\n#### 6. Korean(Hangul)선택 후 add\n#### 7. 기존의 Korean 삭제\n#### 8. 키 매핑<a href="https://shanepark.tistory.com/231" target="_blank"> [참조]</a>\n\n### 3.  ssh\n서버로 원격 접속해 작업 할 수 있도록 ssh 설정\n\n```bash\n$ sudo apt-get update\n\n# openssh-server 설치\n$ sudo apt-get install openssh-server\n    설치 할래? y\n\n# net-tools 설치\n$ sudo apt-get install net-tools\n$ ifconfig\n- en0 또는 비슷한 키를 가진곳에 \n- inet 뒷부분에 사설ip주소 나옴(192.168.ㅇㅇ, ㅇㅇ , 127.0.0.1 아님 주의!)\n- ether 뒷 부분은 기기 mac addr(그렇다고요...)\n\n# vim 설치\n$ sudo apt-get install vim\n\n# ssh 접속 port 설정\n$ sudo vim /etc/ssh/sshd_config\n- Port 22 << 모든 ssh기본 포트는 22이기 때문에 보안을 위해 나만의 port 번호로 수정\n- 다른 사람이 접속할 수 없도록(바꿔도 완벽한건 아님)\n# 변경한 설정 적용\n$ sudo systemctl restart sshd\n\n# 원격 접속\n$ ssh (우분투 설치시 입력한 사용자아이디)@192.168.ㅇㅇ.ㅇㅇ -p (위에서 설정한 포트 번호)\n- 우분투 설치시 설정한 비밀번호 입력\n```\n\n다음번에는 nginx 설치 후 본격적으로 서버를 연결해 봅시다.',
        createdAt: "2023-12-18",
        updatedAt: "2023-12-18",
      },
      {
        id: "a5ea3e0a-c001-405e-add8-5dced745afc5",
        title: "우분투 웹서버 만들기 2",
        body: '# 우분투 웹서버 만들기\n\n저번 시간에는 ssh 설정 까지 완료 하였습니다 \n\n오늘은 nginx 설치 부터 차근 차근 하겠습니다. \n\n### 1. nginx 설치\n```bash\n$ sudo apt-get update\n$ sudo apt-get upgrade\n//*  포트 확인용\n$ sudo apt-get install net-tools\n$ sudo apt-get install nginx\n```\n\n### 2.  nginx 실행\n```bash\n$ service nginx start\n$ service nginx status\n\n//\nnginx.service - A high performance web server and a reverse proxy server\n     Loaded: loded\n     Active: active (runnng) \nActive(running) 이라고 나온다면 실행중.\n//* 이후 사설ip로 접속시 nginx 기본 페이지가 나온다면 성공!\n```\n\n### 3. nginx 설정\nnginx 기본 설정 파일 위치는 /etc/nginx/nginx.conf\n\n기본 설정은 놔두고 다른 방법으로 서버 연결\n```bash\n$ sudo vim /etc/nginx/sites-available/파일이름\n//* 설정할 서버 이름 혹은 구분할 수 있도록 파일 이름을 적어 새로운 파일 작성\nserver {\n\n    listen 80;\n    listen[::80];\n\n    server_name 도메인 주소(있다면) or ubuntu server 사설ip;\n    access_log /var/log/nginx/이름.access.log;\n    error_log /var/log/nginx/이름.error.log;\n\n    location / {\n        proxy_pass http://192.168.xx.xx:설정한포트(우분투에서 실행되고 있는 서버)\n        //* 위에 설정한 server_name:port로 접속하면 proxy_pass의 주소로 연결\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n        proxy_set_header Host $http_host;\n        proxy_cache_bypass $http_upgrade;  \n    }\n}\n\n저장하면 /etc/nginx/sites-enabled/설정한 파일명으로  자동저장됨\n//* 확인 후 적용되어 있지 않으면 아래 명령어\n$ ln -s /etc/nginx/sites-available/파일이름 /etc/nginx/sites-enable/파일명\n\n$ sudo nginx -t\n명령어를 통해 설정 파일의 오류 여부 확인\n\n$ nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n$ nginx: configuration file /etc/nginx/nginx.conf test is successful\n이런 메시지 표시되면 ok\n\n//*\n실패했다면 위의 설정에 브라켓이 짝이 맞는지, 스펠링 틀린게 없는지 확인하고\n구글링을 추천\n\n$ sudo nginx -s reload\n```\n추후 설정한 사설ip:port로 접속시 개인이 설정한 서버가 작동되면 ok!\n\n⚠️ 페이지가 뜨지 않는 issue ⚠️\n\n필자는 sk류 인터넷 사용 중이고. 위의 설정 까지 마친 후 로컬 컴퓨터에서 페이지가 \n\n접속되지 않는 이슈가 있었다. \n\n여ㄱ이 부분 때문에 한 이틀은 고생한 것 같다. \n\n다양한 원인이 있겠지만은 검색 결과 ISP 측에서 할당받은 공인 ip로의 접속을 \n\n사설ip로 접근시 차단 하는 경우도 있다고 한다.(데이터 환경의 휴대폰에서는 접속되며, 로컬 컴퓨터로는 접속 x)\n\n* 해결 방법 *\n\n필자 같은 경우 맥북을 사용 중이며 hosts 파일 설정의 변경으로 해결\n\n윈도우는 검색.....\n\n```bash\n$ sudo vim /etc/hosts \n\n/etc/hosts\n... 생략\n127.0.0.1       localhost\n255.255.255.255 broadcasthost\n::1             localhost\n//* 중간 아무 곳이나\n192.168.xx.xxx  공인ip 혹은 도메인\n... 생략\n\n:wq\n```\n이렇게 해결 할 수 있었다.\n\n글이 길어져 다음 편에서.....\n\n<a href="https://m.blog.naver.com/pjt3591oo/222242046633" target="_blank">[참고: nginx설정]</a>\n\n\n<a href="https://velog.io/@yomi/Mac-%ED%98%B8%EC%8A%A4%ED%8A%B8hosts-%ED%8C%8C%EC%9D%BC-%ED%84%B0%EB%AF%B8%EB%84%90%EB%A1%9C-%EC%88%98%EC%A0%95-%EB%B0%8F-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0" target="_blank">[참고: hosts파일 설정]</a>',
        createdAt: "2023-12-28 14:50:56",
        updatedAt: "2023-12-28 14:50:56",
      },
      {
        id: "281af4ae-a091-4e02-9d5e-0a5f47612a9e",
        title: "우분투 웹서버 만들기 3",
        body: '# 우분투 웹서버 만들기\n이제 우분투 웹서버 만들기 세번째...⚙️\n\n오늘은 Let\'s Encrypt를 활용해 인증서를 발급 받은 뒤 https를 적용해 보자.\n\nLet\'s Encrypt는 https 보급을 위해 무료로 ssl인증서를 발급해 주는 비영리 프로젝트라고 한다.\n\n> Let\'s Encrypt의 인증서 발급 방식은 3가지가 있다.\n> \n> 1 Webroot: 배포한 웹서버 내에 인증서를 위치 시키고 nginx에서 읽어오게 하는 방식인듯 하다.\n>\n> 2 webserver: Nginx 나 Apach 와 같은 웹서버의 옵션을 설정해 SSL 인증을 실시\n>\n> 3 StandAlone: 가장 간편, 빠르고 안전하지만 서비스를 중단해야 함.\n>\n> 4 DNS: DNS의 TXT레코드를 이용해 인증받는 방식\n>\n> 필자는 3번 standalone의 방식을 택했다. \n>\n> 서비스를 중단해야 하지만, 서비스의 중단에 별다른 타격이 없고 간편하게 적용 가능해서 선택 하였음.\n>\n> ```\n> version\n> ubuntu 20.04.6 LTS\n> nginx 1.18.0\n> certbot 0.40.0\n>``` \n\n\n### 1. certbot && Let\'s Encrypt 설치\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install letsencrypt -y\n//* certbot이 같이 설치 됨\n```   \n\n### 2. 인증서 생성\n```bash\n//* nginx 서비스 중지\n//* service 명령 혹은 systemctl(필자는 service)\n$ sudo service nginx stop\n$ sudo service nginx status\n   \n//* 권한 변경\n$ sudo su\n//* 여러개 도메인 등록 가능 하며 실제 도메인이 존재 해야 한다.(가비아, iteasy 등등에서 구매)\n$  certbot certonly --standalone -d 도메인주소 -d www.example.me -d dev.example.me -d test.example.me \n//* 이메일 주소 입력하라면 하고 동의 하라면 한다\n\n//* 이런 문구 나오면 성공\nIMPORTANT NOTES:\n- Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/example.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/example.com/privkey.pem\n//* 밑에는 기부 어쩌고 \n\n//* nginx 재시작\n$ sudo service nginx restart\n```\n### 3. nginx 설정\n```bash\n$ sudo vim /etc/nginx/sites-available/default\n//* 80 port를 https로 redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name _;\n\n    return 301 https://$host$request_uri;\n}\n\n//* 프로젝트 파일 설정\n$ sudo vim /etc/nginx/sites-available/본인서버이름 혹은 프로젝트이름\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name 도메인주소;\n    \n    ssl_certificate "/etc/letsencrypt/live/도메인주소/fullchain.pem";\n    ssl_certificate_key "/etc/letsencrypt/live/도메인주소/privkey.pem";\n    ssl_prefer_server_ciphers on;\n\n    location / {\n                proxy_set_header Host $host;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection "upgrade";\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_pass http://127.0.0.1:설정한포트;\n        }\n}\n\n//* 링크\n$ sudo ln -s /etc/nginx/sites-available/프로젝트파일명 /etc/nginx/sites-enabled/프로젝트파일명\n\n//* nginx 설정 오류 검사\n$ sudo nginx -t\n\n//* nginx 재시작\n$ sudo nginx -s reload\n```\n\n필자는 https 적용이 안되어서...\n\n아니 적용은 되었는데 사설 ip 안에서 접속이 되어\n\n외부에서도 접속이 되는 줄 알았는데 접속이 되지 않았다...\n\n정확한 이유는 모르나 허망할 정도로 가까운 곳에 있었다...\n\n필자와 같이 개인 서버 만들때 isp에서 접속을 차단하는 경우도 있다고 한다.\n\n예전에 공인ip 분배기함에서 80 포트는 내부로 포트포워딩 해 놓았는데 \n\n443은 안해 놓은 것이 문제였다.....\n\n개인 서버 운영하는 분들은 분배기 포트포워딩 ...신경 써야 한다...\n',
        createdAt: "2024-01-03 11:14:36",
        updatedAt: "2024-01-03 11:14:36",
      },
      {
        id: "c5888215-818a-4bb5-94f8-ec4bf44bff7b",
        title: "Javascript Class 알아보기",
        body: '# Javascript Class\n\n갑자기 class??\n\n이유는 javascrip class를 활용한 코딩을 거의 하지 않아\n\n다시 공부해 보려고 한다.\n\n또한, 추후 기회가 된다면 라이브러리를 사용하지 않고\n\n바닐라로 spa 만들기에 대해 포스팅 할 기회가 있다면 class를 활용할 예정.\n\n### 1. 인스턴스 생성해 보기\n\n```\nclass Product {\n    //* 인자를 받아 초기화\n    //* 생략 가능\n    //* 암묵적으로 this를 반환 한다고 함\n   constructor(name, price) {\n        this.name = name;\n        this.price = price;\n    };\n    //* method\n    //* prototype에 등록됨\n    ProductLog () {\n        ...\n    };\n    //* prototype에 등록되지 않음\n    ProductLog2 = () => {           ...\n    }\n    //* 메소드를 등록할때 화살표  함수로 등록하게 되면\n    //* prototype에 등록되지 않기 때문에\n    //* 상속받은 인스턴스에서는 사용할 수 없음.\n };\n\n```\n\n### 2. field(필드)\n\n```\nclass Product {\n    //* 필드\n    //* this.name = name이런 식으로 설정할 필요 없음.\n    name = \'tom\';\n    price = 3000;\n    constructor() {\n    }\n};\n\n```\n\n### 3. 정적 필드와 메소드(static)\n\n```\nclass Product {\n    //* Class자체에서 접근 가능\n    //* 정적 메소드는 정적 프로퍼티만 접근 가능\n    static name = \'tom\';\n    static getPrice {};\n    constructor() {\n    }\n};\n\n```\n\n### 4. private\n\n```\nclass Product {\n    #name = "doney;\n    #price = 0;\n   constructor(name, price) {\n        this.#name = name;\n        this.#price = price;\n    };\n    //* private로 선언되면 접근이나 수정이 불가능\n    //* 필드에 같이 정의 해야 한다\n    get getPrice () {\n        return this.#price;\n    //* 클래스 내에서는 접근 가능\n    }\n };\n\n```\n\n### 5. 상속\n\n```\nclass Product {\n    constructor(name, price) {\n        this.name = name;\n        this.price = price;\n    };\n\n    intoroduce () {\n        return `${this.name}의 가격은 ${this.price}원 입니다.`\n    };\n};\n//* extends 키워드로 상속 가능\nclass Sample extends Product {\n    constructor(name, price, type) {\n          //* 부모의 constructor를 호출\n          super(name, price);\n          this.type = type;\n    };\n    // *프로토타입 체이닝으로 introduce라는 메소드를\n    //* 사용할 수 있음\n    //* But 재 선언해 오버라이딩 됨.\n    introduce () {\n        return `이것의 타입은 ${this.type}의 한 종류 입니다.`\n    };\n    //* 부모의 메소드를 호출해 사용\n    introduce2 () {\n       return  super.introduce + ", " + this.introduce();\n    };\n};\n\nclass Product {\n    static name = "막걸리";\n    static price = 5000;\n    static introduce() {\n        console.log(`이것은 ${this.name} 입니다.`);\n    };\n};\n\nclass Sample() extends Product {\n    static introduce () {\n        super.introduce();\n        console.log("이것의 종류는 술입니다.")\n    };\n};\nSample.introduce();\n// 이것은 막걸리 입니다.\n// 이것의 종류는 술입니다.\n// 이렇게 사용 할 수 있다.\n\n```',
        createdAt: "2024-01-12 11:14:36",
        updatedAt: "2024-01-12 11:14:36",
      },
      {
        id: "16622b8a-f4ec-443c-bbb8-371d794e8d47",
        title: "Js Reduce",
        body: "# reduce 💡\n\n고차함수 중 하나인 reduce 잘 사용하고 있었으나, 오랜만에 쓰려고 하면\n\n자꾸 헷갈려 간단하게 정리해 보려고 한다. \n\n### 고차함수란? \n>- 어떤 프로그래밍 언어의 함수 구현에서 함수를 인자로 넘길 수 있거나 반환할 수 있을 때 함수를 일급 객체(언어 내부에서 값으로 표현되고 전달될 수 있는 자료형)로 취급 하고, 함수를 인자로 받거나 결과로 반환하는 함수를 고차 함수라 한다.\n[[참고]: 나무위키](https://namu.wiki/w/%EA%B3%A0%EC%B0%A8%20%ED%95%A8%EC%88%98)\n\n\n### 사용방법\narr.reduce(Callback(1️⃣ accumulator, 2️⃣ currentValue, 3️⃣ index, 4️⃣ array), 5️⃣ -initialValue-)\n1️⃣: 콜백의 반환값을 누적\n2️⃣: 현재 처리할 값(요소)\n3️⃣: 처리할 요소의 index값(optional)\n4️⃣: reduce를 호출한 배열(optional)\n5️⃣: 누적을 시작할 초기 값(optional: 입력하지 않으면 배열의 첫번째 원소)\n```js\nconst arr = [1, 2, 3, 4, 5];\nconst result = arr.reduce((acc, cur, -idx, arr-) => acc + cur, -적지 않으면 1-) \nconsole.log(result) // 15\n```\n\n값을 합산하는 것 말고도 다른 용도로 사용될 수 있다. \n>\n#### 중첩된 배열 평탄화\n```js\nconst arr = [[1,2,3,4],[5,6,7,8]];\nconsole.log(arr.reduce((acc, cur) => acc.concat(cur)))\n// [1,2,3,4,5,6,7,8]\n// initialValue 입력 x 따라서 배열의 첫 원소인 [1,2,3,4].concat([5,6,7,8])의 결과가 나온다. \n```\n#### 배열 내의 원소 갯수 파악\n```js\nconst arr = ['apple', 'banana', 'apple', 'mango', 'watermelon', 'apple'];\nconst fruit = arr.reduce((acc, cur) => {\n  if(cur in acc) {\n    acc[cur]++\n  } else {\n    acc[cur] = 1\n  }\n  return acc;\n}, {})\nconsole.log(fruit); // {apple: 3, banana: 1, mango: 1, watermelon: 1}\n// 초기값으로 빈 객체 {}를 놓은 뒤 객체의 키값이 존재하지 않는다면 등록, 아니면 증가\n```\n#### 배열 내 특정 값 혹은 속성으로 정렬 \n```js\nconst info = [\n  {\n    name: '스타크',\n    age: 52,\n    union: 'avengers'\n  },\n  {\n    name: '배너',\n    age: 50,\n    union: 'avengers'\n  },\n  {\n    name: '피터',\n    age: 22,\n    union: 'avengers'\n  },\n  {\n    name: '스티브',\n    age: 48,\n    union: 'free'\n  },\n  {\n    name: 'vision',\n    age: '???',\n    union: 'free'\n  },\n  {\n    name: '완다',\n    age: 32,\n    union: 'free'    \n  }\n]\n>\nconst sorted = info.reduce((acc, cur) => {\n  const key = cur['union']  // free or avengers\n  if(!acc[key]) {\n    acc[key] = []\n  }\n  acc[key].push(cur);\n  return acc; // return 잊지 말자 !!\n}, {})\n```\n![](https://images.velog.io/images/ajrfyd/post/920b4030-a33a-443a-8f67-2a02791f7ea9/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-01-18%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.45.31.png)\n주의사항❗️\n위 코드에서 if 다음 else에 push하게 된다면 원하는 결과가 나오지 않는다 !!\n#### 중복 배열 원소 제거\n```js\nconst arr = [1,1,1,22,2,2,3,3,3,34,5,5,];\nconst newArr = arr.sort((a, b) => a - b).reduce((acc, cur) => {\n  const leng = acc.length;\n  if(leng === 0 || acc[leng-1] !== cur) {\n    acc.push(cur)\n    }\n  return acc;\n}, [])\nconsole.log(newArr) // [1, 2, 3, 5, 22, 34]\n```\n이와 같이 다양하게 쓰일 수 있다. 유용한 reduce 사용 방법을 발견하게 되면 추가",
        createdAt: "2022-12-11 15:14:22",
        updatedAt: "2022-12-11 15:14:22",
      },
      {
        id: "fed75adf-167d-49ea-9034-9464181458a4",
        title: "함수의 실행",
        body: "# execution context 💡\nexecution context(실행 컨텍스트)란 자바스크립트에서 코드가 실행되는\n\n추상적인 공간 이라고 생각하면 된다. 특정 함수 안에서 실행되지 않는다면,\n\n보통은 Global execution context에서 실행된다. 함수는 호출될때\n\n자신만의 컨텍스트를 가지게 된다. 여기서 중요한 것은 호출될때 이다.\n\ncontext를 만들고 난 뒤에 호출 스택에 쌓게 되고, 쌓인 스택의 가장 맨 위의\n\n함수를 실행 한다.\n\nlexical environment 💡\nexecution context가 생성되고 난 뒤 변수에 할당된 값을 식별할 수 있는\n\nlexcial environment가 생성된다. 실행 컨텍스트 안에서 참조할 수 있는\n\n값들이 들어가 있으며, 정의되지 않았다면 체이닝된 값을 찾아 상위로 올라가\n\n찾는다.\n\nEx)\n```js\nfunction sum(a) {\n  return function(b) {\n    return a + b;\n  }\n}\n\nconst sum5 = sum(5);\nconsole.log(sum5(10)); // 15\nconst sum7 = sum(7);\nconsole.log(sum7(7)); // 14\n```\n\n![image](https://velog.velcdn.com/images%2Fajrfyd%2Fpost%2F1fdc5ee3-7d93-4727-b758-f72997e1626f%2F%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202022-01-16%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.56.19.png)\n\nGlobal execution context가 생성되고 lexical environment에는\n\nsum은 function으로 sum5와 sum7은 const로 선언되어 있기 때문에\n\n할당은 되어 있지 않다. 코드를 내려가다 sum5를 선언하며 sum(5)가 호출될때\n\n실행 컨텍스트가 하나 만들어 진다. 렉시컬 환경에는 a 값으로 5가 할당 되어\n\n있고, 비로소 글로벌 컨텍스트에 sum5는 func로 바뀐다. console.log에서\n\nsum5(10)이 실행되면 또 하나의 컨텍스트가 생성된다. 렉시컬 환경의 b값은\n\n10으로 할당되고 return 값으로 15를 반환하고 제거되게 된다. 하지만 중간의\n\n컨텍스트는 const로 선언되었기 때문에 사라지지 않고 a = 5 라는 값을\n\n가지고 계속 존재하게 된다.",
        createdAt: "2024-01-19 20:22:53",
        updatedAt: "2022-01-19 20:22:53",
      },
      {
        id: "6c53ae65-b347-4482-9357-c9b25c55d1ef",
        title: "redux 만들어 보기",
        body: '# 상태관리의 고인물 redux 만들어 보기\n\n갑자기 뭔 redux 만들기????  \n\n현재 자바스크립트 만을 활용해 블로그에 채팅모듈을 만들고 있는 중이다. \n\n순수 자바스크립트 만을 이용해 만들며 많은 고충이 있었는데,\n\n그 중에 하나가 상태 관리였다...ㅋㅋㅋ 리엑트를 사용하며 여태껏 엄청 편하게 상태를 관리하고 있었던 것이다....\n\n그래서 구글링을 통해 알아 보았고, 생각보다 어렵지 않게 구현 할 수 있었다. \n\n### redux란??\n리덕스는 쉽게 state(상태)를 관리할 수 있는 툴이다. 그냥 상태라고 하기 보다는 전역 상태라고 하는 것이 \n\n좋을 것이다. 리엑트로 개발을 해 보았던 분이라면 상태 관리를 하며 느꼈던 부분이 있을 것이다. \n\nprops로 전달한 state가 props로 또 전달 되고, 전달받은 props가 또 그 자식에게 또 전달되고....\n\n귀찮은 것을 떠나서...문제는 그 state가 정작 필요하지 않은 자식 컴포넌트에도 전달 되어야 비로소 state가 \n\n필요한 마지막 자식에게 전달 된 다는 것이다. \n\n그래서 전역으로 상태를 관리할 수 있는 다양한 툴들이 나왔고, 그 중에 하나가 redux 인 것이다. \n\n전역으로 상태를 관리 할 수 있는 툴들은 redux, zustand,  recoil 등 다양하게 존재한다. \n\n자바스크립트 만으로 모듈을 개발하면서 느꼈던 상태관리의 귀찮음과 중요성을 통해 공부할 수 있는 계기가 되었다.\n\n### 왜 rddux????\n\n1.일단은 사용해 봤던 툴이라 익숙하다.\n\n2.오래된 상태관리 툴이지만, 아직도 많은 프로젝트에서 사용되고 있다.\n\n3.툴을 사용하기 위한 boilerplate code가 많지만, 컨셉이 상당히 마음에 들었다. <<< 이 부분이 상당히 만족\n\n비전공자 출신이고 처음 부트캠프에서 상태관리 툴으로 redux를 배웠었다. 처음엔 그냥 뭔지 모르고 그냥 배웠었고, \n\n그냥 이렇게 사용하는 구나 하고 무작정 따라 하기에 바빳다. \n\n부트캠프 졸업한 이후 개발 업무를 많이 한 것은 아니지만, 조금씩 공부 하면서 redux의 컨셉이 상태관리 함에 있어\n\n상당히 마음에 들었다. \n\n### 흐름\n\n> action의 dispatch  >> store update >> subscribe 전달 >> view update or action dispatch\n\n단방향으로 단순하게 흐르는 것이 redux인 것이다. \n\n\n이러 이러한 action이 발생(dispatch) 하면 나는 store를(reducer에 정의된) 이러 이러하게 업데이트 할거야.\n\nstore가 업데이트 되면 구독하고 있는곳에 상태가 바뀌었다고 알려 줄거야. 아름답지 않은가????......\n\n아무튼 redux를 간단하게 구현 해 보자. \n\n### store 만들기 \n```js\nconst createStore = (reducer) => {\n    //*  initial state는 프로젝트에 필요에 따라 작성 한다.\n     let state = {\n        number: 0\n    };\n    \n    const getState = () => ({ ...state });\n    const dispatch = (action) => {\n        state = reducer(state, action);\n    };\n\n    return {\n        getState,\n        dispatch\n    }\n};\n```\n\n###  reducer 만들기\n\n```js\n//* reducer는  이전의 state와 action을 받아 상태를 업데이트 하는 함수이다.\n//* 상태를 직접 변경하는게 아니라 새로운 객체를 반환해야 한다. \n//* 이전 객체(원래 state)의 주소값, 업데이트된(새로만든 객체)객체의 주소값이 다르기 때문에\n//* 상태가 변경이 되었다고 판단할 수 있다.\n//* 자바스크립트를 처음 공부할때는 이해하기 힘들 수 있다. \nimport { INCREASE } from "주소"\';\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case INCREASE:\n            //* return {}; 객체 리터럴(새로운 객체 만듦)\n            //* ...state: 원래 state spread를 통해 새로운 객체에 원래의 state 값 복사\n            //* 원래 객체를 직접 변경한게 아니라 새로운 객체에 값만 붙여 넣은 꼴이라 새로운 객체임\n            //* 다른 주소를 가리킴 \n            return {\n               ...state,\n               number: state.number + 1\n            };\n        ...\n        defualt: \n            return state;\n    }\n}\n```\n\n### action 만들기\n```js\n//* 상수 정의(관용적으로 이런 패턴으로 사용하는 것 같음)\nconst INCREASE = "counter_INCREASE"; \n\nexport const increase = () => ({ type: INCREASE });\n```\n\n### 상태 업데이트 알리기\n```js\nconst createStore = (reducer) => {\n    //*  initial state는 프로젝트에 필요에 따라 작성 한다.\n     let state = {\n        number: 0\n    };\n\n    const listener = [];\n    \n    const getState = () => ({ ...state });\n    const dispatch = (action) => {\n        state = reducer(state, action);\n        //* 상태를 사용하는 컴포넌트에서 등록한 함수들을 실행 한다.\n        //* 전역 상태가 업데이트 되면 실행될 함수이다.\n        //* 전역 상태가 업데이트 되면 나는 이 컴포넌트를 전역 상태에 따라 이렇게 업데이트 할거야\n        //* 위의 increase 함수가 실행되면 (type: INCREASE)\n        //* reducer에 의해 전역상태의 number 값이 1 증가 한다. \n        //* subscribe에 등록된 함수가 실행 된다\n        //* 그 등록된 함수는 html의 number요소를 지금 state number값에 맞게 다시 구조화 할거야.\n        //*  라는 함수를 subscribe에 등록\n        listener.forEach(fn => fn());\n    };\n    \n    //* 각 컴포넌트에서 상태가 업데이트 되면 실행될 함수를 등록한다.\n    const subscribe = (fn) => listener.push(fn);\n\n    return {\n        getState,\n        dispatch,\n        subscribe\n    }\n};\n```\n\n### 사용 하는 곳\n```js\n//* 리엑트는 보통 main.js???\nimport reducer from "주소";\nexport const store = createStore(reducer);\n\n//* store의 상태가 필요한 곳\nimport { store } from "주소";\nconst state = store.getState();\n\n//* 구독 등록(subscribe)\nimport { store } from "주소";\n...\n//* html을 만드는 함수 안의 상태 초기화 \nconst state = store.getState(); or \n//* html을 만드는 class 안의 상태 초기화 \nclass {\n    state = store.getState();\n}\n//* 그 뒤 \nstore.subscribe(함수 혹은 class내 html을 조작하는 함수 등의 로직);\n//* 위의 store.subscribe의 인자로 넣은 함수는 전역 상태가 업데이트 되면 실행되기에\n//* 새롭게 업데이트 된 상태값으로 html을 변경 할 수 있는 함수 등을 넣는다.\n...\n```',
        createdAt: "2024-02-01 12:22:53",
        updatedAt: "2022-02-01 12:22:53",
      },
      {
        id: "981a82e0-aca0-491a-bfac-d734b3a13d18",
        title: "React plugin 적용",
        body: "# React Plugin\n\n### 발단\n블로그에 바닐라 js로 제작 중인 plugin을 연결하며 생긴 이슈\n\n1.빌드된 js 파일을 react의 시작인 index.html에 script로 연결.(동작 하지 않음)\n\n처음부터 이런 방식으로 연동할 생각으로 만든 것이라 당황 하였으나, 곰곰히 생각해 보니 결론이 나왔다.\nReact는 빈 html 파일에 동적으로 돔을 생성하여 연결하는 방식이라 html에 연동한 js 파일이 추후에 생성된 돔을 찾지 못하여 발생한 것이었다.\n\n2.useEffect\n```js\nuseEffect(() => {\n    const script = document.createElement('script');\n    script.src = \"/src/....\";\n    script.async = true;\n    document.body.appendChild(script);\n}, []);\n```\n돔 생성 및 랜더링 후 동적으로 스크립트 파일 만들어 연결 시키는 방법...역시 실패..\n> Uncaught SyntaxError: Unexpected token '<'\n\n라는 오류가 발생하였다...열심히 구글링 결과 js파일을 html구문으로 해석하려고 해 생기는 오류라고 하였다.\nhead에 base경로를 넣어 줘라,  경로를 수정해라, 캐시를 지워라 등등 다양한 방법을 시도하였지만 실패....\n\n3.cdn\n위와 같이 useEffect를 활용하지만 js 파일 src만 외부 cdn에서 가져 와  보아라.\n결국 이 방법으로 성공 하였다....참...알다가도 모르겠다....블로그 만들며 홈서버에서 cdn처럼 쓰는 도메인이 있어 다행이지..\ncdn연결 하면서도 cors에러를 만났지만 nginx 설정을 통해 해결!",
        createdAt: "2024-02-09 18:20:33",
        updatedAt: "2022-02-09 18:20:33",
      },
      {
        id: "b36b2894-192f-4560-8dda-5c03e714d865",
        title: "참조?에 대한 고찰",
        body: '# 객체 참조 등에 대한 고찰\n### 계기\n불필요 하다고 생각되는 컴포넌트 리랜더링을 발견.\n\n###  상황\n리덕스 전역 상태 관리 > 채팅 방을 구분하기 위한 값 참조하는 메뉴 >\n\n다른 페이지에서의 객체 내 다른 값 변경 dispatch > \n\n위에서 변경한 값이 아닌 객체의 다른 값을 참조하고 있는 메뉴 리랜더링\n\n## ex)\n```js\n    const initialState = {\n        //* currentRoom 참조    \n        currentRoom: "",\n        ...\n        //* 아래의 msgs 값을 업데이트 하는 action 발생\n        //* 위의 currentRoom참조 페이지 리 랜더링 발생\n        msgs: []\n    };\n```\n\n리덕스는 상태를 받아와서 사용 할 때 기본적으로 최적화가 잘 되어 있어\n\n필요한 상태가 변경될 때에 리랜더링 될 수 있다고 알고 있었는데...암튼...\n\n일단 구글링한 결과와 찾아보며 조금 공부한 결과 원인은 상태 객체 참조\n\n부분에 있는 것 같았다. \n\n### 원인\n```js\n    //! 타입은 생략\n    //! rootReducer\n    //! 예시 객체 \n    //! combineReducers({\n        //user: userReducer,\n        //post: postReducer  \n    )};\n    // 예를 들어 스토어가 이렇다고 치자\n    {\n       user: {\n            name: "" ,\n            age: 0, \n            role: "user" ,\n            ...\n        },\n        post: {\n            ....\n        } \n    }\n    // 상태 참조 하는 컴포넌트\n    // age의 변경에 따른 리랜더링이 필요한 컴포넌트라 치자\n    const Age = () => {\n        const { age } = seSelector((store) => store.user);\n        return <span>{age}</span>\n    };\n    \n    // 다른 컴포넌트에서 name만 업데이트 하는 action dispatch\n    // Age 컴포넌트 리랜더링!!!!!\n```\n평소에 위와 같은 방식으로 상태를 참조 하였었다.\n\n눈치가 빠른 분이라면 벌써 눈치 채셨을 수도 있을 것이다.\n\n그렇다....구조 분해 할당 요놈이 문제였던 것이다...\n\n> 구조 분해 할당은 구조화된 배열과 같은 이터러블 또는 객체를 비구조화, 파괴하여 1개 이상의 변수에 개별적으로 할! 당! 하는 것을 말한다.\n> [참고]: 모던자바스크립트 DeepDive\n\n즉 변수를 새로 만들어 값을 할당 하는 것이다.\n\nuseSelector에서 반환한 값을 새로운 변수에 할당하기에 주소값이 달라진다.\n\n구조 분해 할당으로 인해 새로운 주소에 store의 필요한 값이 할당이 된 것이다.\n\n주소 값이 바뀌었기 때문에 컴포넌트에서 참조하던 값이 변경되지 않았음에도\n\n컴포넌트가 참조하는 상태의 주소값이 다른 곳을 바라 보고 있기 때문에 \n\n값이 바뀌었다고 판단되어 다시 랜더링이 일어나는 것이다.\n\n사실 처음 검색 했을때는 딱 아 이거구나 라는 느낌이 있었는데...\n\n글을 점점 쓰면서 정확하게 풀기 위해 검색하고 공부하며 생각하는데\n\n뭔가 조금 혼란스러운 부분이 글을 쓰며 생겼다.\n\n일단은 내가 이해한 부분으로 작성할 것이고, 틀릴 수도 있으니 양해 부탁 드립니다.\n\n오류가 있다면 채팅으로 문의 바랍니다.\n\n',
        createdAt: "2024-02-16 05:51:11",
        updatedAt: "2024-02-16 05:51:11",
      },
      {
        id: "855a405e-9228-4871-8e46-e2bd075f7e26",
        title: "fetch api Error 처리",
        body: '# fetch api Error 처리\n\n### 발단: fetch api를 활용한 요청 에서의 발생한 상황\n\n### 문제: try  catch문에서 에러가 잡히지 않았다.\n\n바닐라 자바스크립트를 활용해 모듈을 만드는 과정에서 일이 생겼다.\n\n웹 브라우저에서 에러가 잘 표시 되었으나 catch문의 로그에 찍히지 않았다.\n\n구글링을 통해 폭풍 검색을 시작 하여 답을 찾아 내었다. \n\n### 원인: api 설계\nfetch api 자체 설계가 그렇게 되어 있던 것이다.\n\n> 취득 성공 여부 확인\n> fetch() 프로미스는 네트워크에 오류가 있었거나, \n> 서버의 CORS 설정이 잘못된 경우 TypeError로 거부됩니다.\n> 그러나 이 두 경우는 권한처럼 설정의 문제고,\n> 404와 같은 응답은 네트워크 오류가 아니므로 거부하지 않습니다. \n> fetch()가 성공했는지를 정확히 알아내려면 프로미스의 이행 여부를 확인한 후,\n> Response.ok 속성의 값이 true인지도 확인해야 합니다.\n> 상태 코드가 200 이상 299 이하인지 간단하게 확인할 수 있는 불리언 값입니다.\n\n그렇다...MDN에 나와 있었다....\n\n거부됩니다 라는 것이 키워드 인듯 하다. \n\n살짝 실험해 본 결과 cors에러를 인위적으로 발생 시키면 \n\ncatch블럭에서 잡아 낼 수 있는 것으로 보아 네트워크 에러와 cors\n\n는 일반적으로 catch블럭에서 에러 처리를 하면 되고,\n\n200 ~ 299 외의 에러는 response객체의 ok 불리언 값을 잡아\n\n에러를 처리하면 될 것이다.\n\n<a href="https://developer.mozilla.org/ko/docs/Web/API/Fetch_API/Using_Fetch#%EC%9D%91%EB%8B%B5_%EA%B0%9D%EC%B2%B4" target="_blank">[참고: MDN]</a>',
        createdAt: "2024-02-28 10:08:30",
        updatedAt: "2024-02-28 10:08:30",
      },
      {
        id: "35e2c911-8b3e-4b4c-bac7-8299e21c8f19",
        title: "React 폴더 구조",
        body: '# React 폴더 구조\n\n###  계기\n항상 리액트 개발을 하며 별거 아닌 것 같지만 스트레스를 받는 폴더 구조...\n\n항상 폴더 구조가 일관성 없이 바뀌고 뭔가 명확하게 정립되지 않아 많은 고민을 해왔음.\n\n마침 제로초님의 프론트엔드 폴더 구조에 관한 유투브 영상을 보고 정리해 보고자 함.\n\n###  기존 \n\n```js\n// src 하위\nassets\ncomponents\n    ㄴ 공통 컴포넌트 폴더\n        ㄴ ex) 커스텀 버튼\n        ㄴ ex) 커스텀 인풋 등\n    ㄴ pages 폴더와 같은 이름을 가진 폴더\n        ㄴ 페이지의 하위 구성 요소 컴포넌트(프리젠테이션 컴포넌트)\nlib\n    ㄴ utils\n    ㄴ hooks\n    ㄴ styles(커스텀 스타일, styled components global styles...)\n    ㄴ api\npages\n    ㄴ ex) 로그인 폴더 \n    ㄴ ex) 메인 폴터\n    ㄴ ex) 블로그 메인\nstore\n    ㄴ actions\n    ㄴ reducers   \n    ㄴ index.ts(combine reducer)\n    ㄴ types.ts\n    //* store에서 사용하는 type들은 최대한 가까이 있는 것을 선호\ntypes\n    ㄴ 전역에서 쓰이는 타입 등\n```\nassets폴더는 다들 아실 것이라 생각하고, components 폴더에는 어디에서든 사용할 수 있는 공통 컴포넌트들\n\npage의 주제를 딴 폴더에서는 pages에서 쓰이는 하위 컴포넌트들 \n\nlib 폴더에서는 유틸성 함수, 훅, 전역 스타일, api 요청 instance 등\n\nstore에서는 리덕스 전역 state 정의 \n\ntypes에서는 앱 전역에서 쓰일 수 있는 타입들 \n\n각 컴포넌트에서 부모에게 받는 prop 타입은 각 파일에서 선언\n\n프로젝트를 만들 때 마다 항상 폴더의 구조가 다르고 일관성이 없었고, 그나마 위의 패턴이 velopert님  velog\n\n폴더 구조를 조금 참고해 사용하고 있는 패턴 이었다. 그래도 폴더 구조에 대한 갈증은 마르지 않았다.\n\n찰나에 제로초님의 유투브에서 프론트엔드 폴더 구조에 대한 이야기가 올라왔다. \n\n일명 FSD(Feature-Sliced Design) 라고 한다.\n\nFSD  는 크게 레이어(layer), 슬라이스(slice), 세그먼트(segment)의 세 가지로 나뉘게 된다.\n\n> # Layer\n>\n> 최상위 폴더이며 레이어의 수는 최대 7개\n>\n> app: 초기화되는 곳. 프로바이더, 라우터, 전역 스타일, 전역 타입 선언 등이 정의. 애플리케이션의 진입점 역할.\n>\n> //* main.tsx와 같이 전역에서 사용할 수 있는 context로 감싸진 *//\n>\n> processes?: 여러 페이지에 걸쳐 있는 프로세스를 처리. 더 이상 사용되지 않지만 가끔 사용. deprecated !\n>\n> pages: 애플리케이션의 페이지.\n> \n> widgets: 페이지에 사용되는 독립적인 UI 컴포넌트.\n>\n> /* 기존의 layout을 담당하는 폴더 */\n>\n> features?:  비즈니스 가치를 전달. 좋아요, 리뷰 작성, 제품 평가 등.\n>\n> entities?: 비즈니스 엔티티. 사용자, 리뷰, 댓글 등이 포함될 수 있음\n> \n> //* 기존의 components 역할을 하는 폴더 *//\n>\n> shared: 특정 비즈니스 로직에 종속되지 않은 재사용 가능한 컴포넌트와 유틸리티. UI 키트, axis 설정, 애플리케이션 설정, 비즈니스 로직에 묶이지 않은 헬퍼 등.\n>\n> ## ** 규칙 **\n>\n> 하위 레이어에서는 상위 레이어를 호출 할 수 없으며, 하위 레이어는 상위 레이어의 곳곳에 사용되기 때문에\n>\n> 하위 레이어의 변경은 많은 상위 레이어의 부수 효과를 발생하기 때문에 조심 해야 함.\n>\n> # 슬라이스\n>\n> 슬라이스라는 하위 디렉토리는 특정 비즈니스 엔티티에 대한 것. 슬라이스의 주요 목표는 코드를 값별로 그룹화하는 것.\n>\n> 이 디렉토리에 있는 코드는 직접적으로 공유되지 않아야 함.\n>\n> # 세그먼트\n>\n> 각 슬라이스는 세그먼트로 구성. 슬라이스 내의 코드를 나누는 데 도움.\n>\n> api - 필요한 서버 요청.\n>\n> UI - 슬라이스의 UI 컴포넌트.\n>\n> model - 비즈니스 로직, 즉 상태와의 상호 작용. actions 및 selectors가 이에 해당\n>\n> lib - 슬라이스 내에서 사용되는 보조 기능.\n>\n> config - 세그먼트는 거의 필요하지 않음.\n>\n> consts - 상수.\n>\n> ## 공개 API\n> \n> 각 슬라이스와 세그먼트에는 공개 API가 있고, index.ts파일에서 필요한 api만 외부로 공개\n>\n> 나머지는 내부에서만 사용될 수 있도록 한다. \n\n이 컨셉의 구조가 아직 정확하게 이해가 가지 않는 부분이 많고, 더 공부를 해 봐야 겠지만, \n\n전에 사용하던 구조와는 다르게 기준이 있고, 규제를 통한 일관성을 통해 정말 레고와 같이 컴포넌트를 조립한다\n\n라는 느낌이 강하게 들었다. 정말 잘 이해하고 사용한다면 좋은 컨셉이 될 것 같지만, \n\n진입 장벽이 높아 명확하게 이해하고 활용하지 않는다면 독이 될 수도 있을 거라는 생각이 들었다.\n\n개인 프로젝트나 소규모 프로젝트에는 뭔가 적합하지 않다는 생각이다.\n\n아직 명쾌하게 해소되지는 않았지만, 조금 더 고민하고 공부해 봐야할 명분이 생긴 것 같다.\n\n<a href="https://emewjin.github.io/feature-sliced-design/?utm_source=substack&utm_medium=email" target="_blank">[참고]</a>',
        createdAt: "2024-03-11 23:01:12",
        updatedAt: "2024-03-11 23:01:12",
      },
      {
        id: "4545f6b0-cba3-435c-bdd2-866f24e5a124",
        title: "SEO에 대하여...",
        body: "# SEO 에 대한 고찰...\n이 글을 쓰는 이유는 부끄럽고 반성을 위해 작성 하게 되었다...\n\n또한 나와 같은 실수를 겪을 수 있는 다른 개발자를 위해 적어본다...\n\n리엑트 개발을 하며 react-helmet, react-snap 같은 모듈들을 \n\n사용하여 빈약한 seo에 대하여 일정 부분 보완할 수 있다 ..,,,\n\n하지만 내 블로그는 검색되지 않았다....그래서 아직 내가 리엑트 seo 최적화에 대하여 \n\n모르는 부분이 많아 추후 더 검색을 통해 공부를 할 필요가 있겠다는 생각을 하였다....\n\n물론 지금도 모르는 부분이 더 많긴 하다만...\n\n도메인을 구매해 seo 처리 후 배포한 페이지는 당연히 검색될 것이라고 생각 하였다....\n\n큰 오산이었다....시간이 조금 걸리나???....이것도 큰 오산이었다....\n\n검색엔진에 등록을 해 줘야 했던 것이다.....그렇다.....부끄럽다.....\n\n배포된 node.js 서버에서 찍힌 로그를 보니 여기 저기서 방문 한 흔적이 남아 있었다....\n\n그래서 딱히 해줘야 할 부분은 없을 것이라고 생각 하였는데\b....검색엔진에 등록을 해 줘야 했던 것이다.....\n\n부끄럽다.....반성해야지.....등록 방법은.....google search console 키워드로 검색 해보길.....\n\ngoogle에 등록하고 난 후 네이버에도 검색이 되는 것인 것이다.....",
        createdAt: "2024-03-21 23:15:52",
        updatedAt: "2024-03-21 23:15:52",
      },
      {
        id: "7f2b0f4f-e763-451a-8bc6-1a81a2df0f79",
        title: "Vite 폴더 alias 설정",
        body: '# Vite 폴더 alias\n### 폴더 alias 란?\n개발 하며 임포트 경로를 보면 상당히 지저분한 경우가 많다...\n\n```js\n// ex)\nimport  Components from "../../../../Components"  \n```\nnext.js에서 폴더 alias로 @를 붙여 사용하는 것을 보고 방법이 없을까 찾아 보았다.\n\n### step 1\n```ts\n// tsconfig.json\n{\n  "compilerOptions": {\n    ...\n    "baseUrl": "src",\n    "paths": {\n      "@/*": ["*"],\n      "@components/*": ["components/*"],\n      "@shared/*": ["components/shared/*"]\n    },\n  },\n  ...\n}   \n```\n### step 2\n```js\n// vite.config.ts\nexport default defineConfig({\n  ...\n  resolve: {\n    alias: [\n      { find: \'@\', replacement: path.resolve(__dirname, \'src\') },\n      {\n        find: \'@components\',\n        replacement: path.resolve(__dirname, \'src/components\'),\n      },\n      {\n        find: \'@shared\',\n        replacement: path.resolve(__dirname, \'src/components/shared\'),\n      },\n    ],\n  },\n});\n```\nstep 3\n```js\nimport CustomButton from "@shared/CustomButton";\n```\n이렇게 사용하면 된다.\n\n### vite plugin 활용 방법\n\n```js\nnpm i -D vite-tsconfig-paths\n\n//* vite.config.ts\nexport default defineConfig({\n  ...\n  resolve: {\n     plugins: [react(), tsconfigPaths()],\n  },\n});\n```\n\n참고로 cra에서 folder alias를 사용하기 위해 eject를 하는 등 복잡하다고 함...',
        createdAt: "2024-03-29 10:01:13",
        updatedAt: "2024-03-29 10:01:13",
      },
      {
        id: "1f20ba70-9a6f-4450-8bf6-412ab3fbdc87",
        title: "Vite 정적 파일 세팅",
        body: '# Vite 정적 파일 세팅\nVite React 프로젝트를 진행중 assets 폴더의 비디오 파일이 불려오지 않았다..\n\n### vite 프로젝트의 src/assets를 사용 하는 경우\n```js\nimport fileName from "상대경로/fileName";\n\nconst App = () => {\n    ...\n    return (\n        <>\n            <video>\n                <source src={fileName}/> \n            </video>\n        </>\n    );\n}\n```\n이렇게 사용하고,\n\n### vite 프로젝트의 public 폴더를 사용하는 경우\n⚠️ assets 폴더를 public 밑으로 위치 시키고 절대경로로 접근해야 함.\n\n⚠️ javascript로 mport 할 수 없다.\n```js\n//* public/assets/...\nconst App = () => {\n    ...\n    return (\n        <>\n            <video>\n                <source src="/assets/경로/fileName.mp4" type="video/mp4"/> \n            </video>\n        </>\n    );\n}\n```\n이렇게 사용 하면 작동한다. \n\n<a href="https://vitejs.dev/guide/assets.html#the-public-directory" target="_blank">\n[참조1]\n</a>\n<a href="https://www.answeroverflow.com/m/1195197417025445959" target="_blank">\n[참조2]\n</a>',
        createdAt: "2024-04-10 20:30:40",
        updatedAt: "2024-04-10 20:30:40",
      },
      {
        id: "3b1f1f05-9043-4463-8709-f65e0cd7d0c8",
        title: "Polymorphic한 컴포넌트",
        body: "# Polymorphic한 컴포넌트에 대하여",
        createdAt: "2024-04-25 22:45:22",
        updatedAt: "2024-04-25 22:45:22",
      },
    ]);
  },

  async down(queryInterface, Sequelize) {
    /**
     * Add commands to revert seed here.
     *
     * Example:
     * await queryInterface.bulkDelete('People', null, {});
     */
    await queryInterface.bulkDelete("Post");
  },
};
